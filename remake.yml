## All R files that are used must be listed here:

packages:
  - dplyr
  - magrittr
  - lubridate
  - tidyr
  - mvabund
  - ggplot2
  - lubridate
  - vegan
  - pryr
  - rmarkdown

sources:
  - R.scripts/results.R
  - R.scripts/data_cleaning.R
  - R.scripts/data_organizing.R
  - R.scripts/run_analyses.R
  
targets:
  all:
    depends: 
      - figures/Fig1.png
      - MS/OrgSize.pdf

### read in data, including each bacterial file

  insects:
    command: read_data("raw-data/insect.communities.table.txt")
  
  insectnames:
    command: read.csv("raw-data/insectnames.csv", stringsAsFactors=FALSE)
    
  blocks:
    command: read_data("raw-data/blocks.txt")
    
  bromeliad:
    command: read_data("raw-data/bromeliad.volumes.txt")

  inverts:
    command: clean_insect_names(insects, insectnames)
    quiet: true

  zoops:
    command: clean_zooplankton("raw-data/zoop.txt")
    
  bact_1:
    command: read_clean_bact("raw-data/bacteria/block1.csv")
        
  bact_2:
    command: read_clean_bact("raw-data/bacteria/block2.csv")
        
  bact_3:
    command: read_clean_bact("raw-data/bacteria/block3.csv")
        
  bact_4:
    command: read_clean_bact("raw-data/bacteria/block4.csv")
        
  bact_5:
    command: read_clean_bact("raw-data/bacteria/block5.csv")
   
## store data as a list

  bact_list:
    command: >
      list(bact_1 = bact_1, bact_2 = bact_2, bact_3 = bact_3,
           bact_4 = bact_4, bact_5 = bact_5)

  bact_df:
    command: bact_list_to_df(bact_list) # combined bact across all blocks
       
## WITH BLOCK setup

  inverts_tts_ini:
    command: TaxaTimeSelector(inverts, .blocks = blocks, .bromeliad = bromeliad, sampletime = I("initial"))

  zoops_tts_ini:
    command: TaxaTimeSelector(zoops, .blocks = blocks, .bromeliad = bromeliad, sampletime = I("initial"))

  bact_tts_ini:
    command: TaxaTimeSelector(bact_df, .blocks = blocks, .bromeliad = bromeliad, sampletime = I("initial"))

  inverts_tts_fin:
    command: TaxaTimeSelector(inverts, .blocks = blocks, .bromeliad = bromeliad, sampletime = I("final"))

  zoops_tts_fin:
    command: TaxaTimeSelector(zoops, .blocks = blocks, .bromeliad = bromeliad, sampletime = I("final"))

  bact_tts_fin:
    command: TaxaTimeSelector(bact_df, .blocks = blocks, .bromeliad = bromeliad, sampletime = I("final"))  
    
  ### perform permanovas

  inverts_adonis_ini:
    command: AdonisData(inverts_tts_ini, method = I("euclid"))

  zoops_adonis_ini:
    command: AdonisData(zoops_tts_ini, method = I("euclid"))

  bact_adonis_ini:
    command: AdonisData(bact_tts_ini, method = I("euclid"))

  inverts_adonis_fin:
    command: AdonisData(inverts_tts_fin, method = I("euclid"))

  zoops_adonis_fin:
    command: AdonisData(zoops_tts_fin, method = I("euclid"))

  bact_adonis_fin:
    command: AdonisData(bact_tts_fin, method = I("euclid"))
    
  figures/Fig1.png:
    command: > 
      r2_plot(inverts_adonis_ini, inverts_adonis_fin,
              zoops_adonis_ini, zoops_adonis_fin,
              bact_adonis_ini, bact_adonis_fin)
    plot: true
    
  figures/Fig1.pdf:
    command: > 
      r2_plot(inverts_adonis_ini, inverts_adonis_fin,
              zoops_adonis_ini, zoops_adonis_fin,
              bact_adonis_ini, bact_adonis_fin)
    plot: true

  MS/SuppMatt.md:
    depends:
      - inverts_adonis_ini
      - zoops_adonis_ini
      - bact_adonis_ini
      - inverts_adonis_fin
      - zoops_adonis_fin
      - bact_adonis_fin
    knitr: true
    
  MS/OrgSize.pdf:
    depends:
      - figures/Fig1.pdf
    command: render("MS/OrgSize.md")

  ### processing adonis results
#  adonis_list_meta:
#    command: > 
#      list(meta_ini_adonis = meta_ini_adonis, 
#           meta_fin_adonis = meta_fin_adonis)
#           
#  adonis_results_meta:
#    command: result_df(adonis_list_meta)
#    
#  adonis_summary_meta:
#    command: get_summary_adonis(adonis_results_meta)
#    
#  reports/adonis_meta.csv:
#    command: write_results(adonis_summary_meta, file = target_name)
#    
#  reports/with_block.html:
#    depends: reports/adonis_meta.csv
#    command: render("reports/with_block.Rmd")

  ### perform manyglm

 # meta_ini_manyglm_pois:
  #  command: lapply_manyglm(meta_list_ini, .formula = I("responses ~ Block * species"))
    
  #meta_fin_manyglm_pois:
   # command: lapply_manyglm(meta_list_fin, .formula = I("responses ~ Block * species"))

  ### processing manyglm results

  #manyglm_list_meta:
  #  command: >
  #    list(meta_ini_manyglm_pois = meta_ini_manyglm_pois,
  #         meta_fin_manyglm_pois = meta_fin_manyglm_pois)
           
  #manyglm_result_meta:
  #  command: result_df(manyglm_list_meta, I(c("grp", "time", "tech", "dist")))
    
  #anova_manyglm_meta:
  #  command: get_info_manyglm(manyglm_result_meta)

## WITHOUT BLOCK setup (split list)

  
  # now run manyglm with poisson:
    
  #bact_ini_manyglm_pois:
  #  command: lapply_manyglm(bact_list_ini, .formula = I("responses ~ species"))
    
  #bact_fin_manyglm_pois:
  #  command: lapply_manyglm(bact_list_fin, .formula = I("responses ~ species"))

  #manyglm_list:
  #  command: >
  #    list(bact_ini_manyglm_pois = bact_ini_manyglm_pois,
  #         bact_fin_manyglm_pois = bact_fin_manyglm_pois)
           
  #manyglm_result:
  #  command: result_df(manyglm_list, I(c("grp", "time", "tech", "dist")))
    
  #anova_manyglm:
  #  command: get_info_manyglm(manyglm_result)

