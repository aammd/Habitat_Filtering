## All R files that are used must be listed here:

packages:
  - dplyr
  - magrittr
  - lubridate
  - tidyr
  - mvabund
  - ggplot2
  - lubridate
  - vegan
  - pryr
  - rmarkdown

sources:
  - R.scripts/results.R
  - R.scripts/data_cleaning.R
  - R.scripts/data_organizing.R
  - R.scripts/run_analyses.R
  
targets:
  all:
    depends: 
      - reports/test.html
      - reports/with_block.html

### read in data, including each bacterial file

  insects:
    command: read_data("raw-data/insect.communities.table.txt")
  
  insectnames:
    command: read.csv("raw-data/insectnames.csv", stringsAsFactors=FALSE)
    
  blocks:
    command: read_data("raw-data/blocks.txt")
    
  bromeliad:
    command: read_data("raw-data/bromeliad.volumes.txt")

  inverts:
    command: clean_insect_names(insects, insectnames)
    quiet: true

  zoops:
    command: clean_zooplankton("raw-data/zoop.txt")
    
  bact_1:
    command: read_clean_bact("raw-data/bacteria/block1.csv")
        
  bact_2:
    command: read_clean_bact("raw-data/bacteria/block2.csv")
        
  bact_3:
    command: read_clean_bact("raw-data/bacteria/block3.csv")
        
  bact_4:
    command: read_clean_bact("raw-data/bacteria/block4.csv")
        
  bact_5:
    command: read_clean_bact("raw-data/bacteria/block5.csv")
   
## store data as a list

  bact_list:
    command: >
      list(bact_1 = bact_1, bact_2 = bact_2, bact_3 = bact_3,
           bact_4 = bact_4, bact_5 = bact_5)

  bact_df:
    command: bact_list_to_df(bact_list)
       
## WITH BLOCK setup

  inverts_tts_ini:
    command: TaxaTimeSelector(inverts, .blocks = blocks, .bromeliad = bromeliad, sampletime = I("initial"))

  zoops_tts_ini:
    command: TaxaTimeSelector(zoops, .blocks = blocks, .bromeliad = bromeliad, sampletime = I("initial"))

  bact_tts_ini:
    command: TaxaTimeSelector(bact_df, .blocks = blocks, .bromeliad = bromeliad, sampletime = I("initial"))

  inverts_tts_fin:
    command: TaxaTimeSelector(inverts, .blocks = blocks, .bromeliad = bromeliad, sampletime = I("final"))

  zoops_tts_fin:
    command: TaxaTimeSelector(zoops, .blocks = blocks, .bromeliad = bromeliad, sampletime = I("final"))

  bact_tts_fin:
    command: TaxaTimeSelector(bact_df, .blocks = blocks, .bromeliad = bromeliad, sampletime = I("final"))  
    
  ### perform permanovas

  meta_ini_adonis:
    command: lapply_adonis(meta_list_ini)
    
  meta_fin_adonis:
    command: lapply_adonis(meta_list_fin)

  ### processing adonis results
  adonis_list_meta:
    command: > 
      list(meta_ini_adonis = meta_ini_adonis, 
           meta_fin_adonis = meta_fin_adonis)
           
  adonis_results_meta:
    command: result_df(adonis_list_meta)
    
  adonis_summary_meta:
    command: get_summary_adonis(adonis_results_meta)
    
  reports/adonis_meta.csv:
    command: write_results(adonis_summary_meta, file = target_name)
    
  reports/with_block.html:
    depends: reports/adonis_meta.csv
    command: render("reports/with_block.Rmd")

  ### perform manyglm

 # meta_ini_manyglm_pois:
  #  command: lapply_manyglm(meta_list_ini, .formula = I("responses ~ Block * species"))
    
  #meta_fin_manyglm_pois:
   # command: lapply_manyglm(meta_list_fin, .formula = I("responses ~ Block * species"))

  ### processing manyglm results

  #manyglm_list_meta:
  #  command: >
  #    list(meta_ini_manyglm_pois = meta_ini_manyglm_pois,
  #         meta_fin_manyglm_pois = meta_fin_manyglm_pois)
           
  #manyglm_result_meta:
  #  command: result_df(manyglm_list_meta, I(c("grp", "time", "tech", "dist")))
    
  #anova_manyglm_meta:
  #  command: get_info_manyglm(manyglm_result_meta)

## WITHOUT BLOCK setup (split list)

  bact_list_ini:
    command: lapply_bact(bact_list, .blocks = blocks, .bromeliad = bromeliad, sampletime = I("initial"))   

  bact_list_fin:
    command: lapply_bact(bact_list, .blocks = blocks, .bromeliad = bromeliad, sampletime = I("final"))   
    
  ## remove NA rows from bacteria lists:
  bact_list_ini_noNA:
    command: lapply_narow(bact_list_ini)
    
  bact_list_fin_noNA:
    command: lapply_narow(bact_list_fin)

  ## perform permanovas:
   
  bact_ini_adonis:
    command: lapply_adonis(bact_list_ini_noNA, .strata = NULL)
    
  bact_fin_adonis:
    command: lapply_adonis(bact_list_fin_noNA, .strata = NULL)

  ### processing adonis results
  adonis_list:
    command: > 
      list(bact_ini_adonis = bact_ini_adonis,
           bact_fin_adonis = bact_fin_adonis)
           
  adonis_results:
    command: result_df(adonis_list)
    
  adonis_summary:
    command: get_summary_adonis(adonis_results)
    
  reports/adonis.csv:
    command: write_results(adonis_summary, file = target_name)
    
  reports/test.html:
    depends: reports/adonis.csv
    command: render("reports/test.Rmd")
  
  # now run manyglm with poisson:
    
  #bact_ini_manyglm_pois:
  #  command: lapply_manyglm(bact_list_ini, .formula = I("responses ~ species"))
    
  #bact_fin_manyglm_pois:
  #  command: lapply_manyglm(bact_list_fin, .formula = I("responses ~ species"))

  #manyglm_list:
  #  command: >
  #    list(bact_ini_manyglm_pois = bact_ini_manyglm_pois,
  #         bact_fin_manyglm_pois = bact_fin_manyglm_pois)
           
  #manyglm_result:
  #  command: result_df(manyglm_list, I(c("grp", "time", "tech", "dist")))
    
  #anova_manyglm:
  #  command: get_info_manyglm(manyglm_result)

