} else {
## LOADING model objects
## initial insects
insect_initial_nbin <- insect_manyglm(run_interaction_model = rerun, sampletime = "initial")
insect_initial_pois <- insect_manyglm(run_interaction_model = rerun, sampletime = "initial", glm_family = "poisson")
## final insects
insect_final_nbin <- insect_manyglm(run_interaction_model = rerun, sampletime = "final")
insect_final_pois <- insect_manyglm(run_interaction_model = rerun, sampletime = "final", glm_family = "poisson")
## initial zoops
zoop_initial_nbin <- insect_manyglm(.taxa = zoop_combined,
run_interaction_model = rerun,
organisms = "zoops",
sampletime = "initial")
zoop_initial_pois <- insect_manyglm(.taxa = zoop_combined,
run_interaction_model = rerun,
organisms = "zoops",
sampletime = "initial", glm_family = "poisson")
## final zoops
zoop_final_nbin <- insect_manyglm(.taxa = zoop_combined,
run_interaction_model = rerun,
organisms = "zoops",
sampletime = "final")
zoop_final_posis <- insect_manyglm(.taxa = zoop_combined,
run_interaction_model = rerun,
organisms = "zoops",
sampletime = "final", glm_family = "poisson")
}
## file for analyzing the habitat experiment
## Andrew MacDonald, 2014
# packages ----------------------------------------------------------------
library(dplyr)
library(tidyr)
library(mvabund)
library(magrittr)
library(ggplot2)
library(lubridate)
# read in data ------------------------------------------------------------
blocks <-
read.table("data/blocks.txt",header=TRUE,comment.char="#",
stringsAsFactors=FALSE) %>% tbl_df()
insects <-   read.table("data/insect.communities.table.txt",
header=TRUE,comment.char="#",stringsAsFactors=FALSE) %>% tbl_df()
insectnames <- read.csv(file = "data/insectnames.csv") %>% tbl_df()
zoop <-  read.table("data/zoop.txt",
header=TRUE,comment.char="#",stringsAsFactors=FALSE) %>% tbl_df
bromeliad <-
read.table("data/bromeliad.volumes.txt",comment.char="#",
header=TRUE,stringsAsFactors=FALSE) %>% tbl_df
bact <- list.files("data/bacteria/",
pattern="*.csv",
full.names=TRUE) %>%
lapply(read.table,comment.char="#",
header=TRUE,stringsAsFactors=FALSE,sep=",")
# renaming insects taxa ---------------------------------------------------
## correct variable spellings
insects_renamed <- insects %>%
left_join(insectnames) %>%
select(sampling, bromeliad, Spp = sp_name, abundance) %>%
group_by(sampling, bromeliad, Spp) %>%
summarise(abundance = sum(abundance))
# combining zooplankton ---------------------------------------------------
zoop_combined <- zoop %>%
group_by(sampling, bromeliad, Spp) %>%
summarise(abundance = sum(abundance))
# rearrange bacteria ------------------------------------------------------
bacteria_list <- lapply(bact,function(DF) {
plotdates <- do.call(rbind,strsplit(DF$sample,split=" "))
samp.dates <- paste(apply(plotdates[,-1],1,paste,collapse="-"),"2013",sep="-")
samp.dates <- dmy(samp.dates)
duration <- (max(samp.dates)-samp.dates)<as.duration(259200)
sampling <- c("initial","final")[duration+1]
DF <- DF[,!names(DF)%in%c("sample")]
DF <- plyr::rename(DF,c("Block"="block"))
data.frame(bromeliad=plotdates[,1],sampling,DF,stringsAsFactors=FALSE)%>%
filter(sampling=="final") %>%
select(-block,-sampling)
})
## go through this list, identify the block, and put the block names in a vector
## then set that vector as names for the list.
bacteria_list <- plyr::laply(bacteria_list,function(DF,.bromeliad=bromeliad){
DF %>%
select(Brom=bromeliad) %>%
left_join(.bromeliad) %>%
extract2("Block") %>% unique
}
) %>%
set_names(bacteria_list,.)
# insects in threespp experiment ------------------------------------------
insect_manyglm <- function(.blocks = blocks, .bromeliad = bromeliad,
.taxa = insects_renamed,
run_interaction_model = FALSE,
sampletime = "final", glm_family = "negative.binomial",
organisms = "insects") {
## select blocks
insect_data <- .blocks %>%
filter(experiment == "threespp") %>%
select(Block = block) %>%
## merge to bromeliad
left_join(.bromeliad %>% select(Brom, Block, species)) %>%
# and add the animals
left_join(.taxa %>%
filter(sampling == sampletime) %>%
spread(key = Spp, abundance, fill = 0) %>%
mutate(Brom = bromeliad) %>%
select(-bromeliad)
) %>%
# set up a list object a la mvabund
l(data -> {
list(factors = data %>%
select(Block, species) %>%
as.matrix,
insects = data %>%
select(-Block, -Brom, -species, -sampling) %>%
as.matrix)}
)
## call mvabund on responses
insectresponses <- insect_data %>%
extract2("insects") %>%
mvabund
## run glm
insect_glm_interact <- insect_data %>%
extract2("factors") %>%
data.frame %>%
manyglm(insectresponses ~ Block * species, data = ., family = glm_family)
## name the model output
model_name <- paste0(organisms, "_interaction_summary_", sampletime, "_", glm_family, ".Rdata")
# summary gives overall fit
if (run_interaction_model) {
insect_interact_summary <- insect_glm_interact %>%
summary(resamp="residual")
save(insect_interact_summary, file = model_name)
message(paste("I just created the file",model_name))
} else {
load(model_name)
}
## name the anova output
anova_name <- paste0(organisms, "_interaction_anova_", sampletime, "_", glm_family, ".Rdata")
# anova gives us values for each animal
if (run_interaction_model) {
insect_interact_anova  <- insect_glm_interact %>%
anova(resamp="perm.resid", p.uni="adjusted", show.time="all")
save(insect_interact_anova, file = anova_name)
message(paste("I just created the file", anova_name))
} else {
load(anova_name)
}
insect_statistic <- insect_interact_anova %>%
extract2("uni.test") %>%
t %>%
data.frame %>%
select(-X.Intercept.,
Block_wald=Block,
species_wald=species) %>%
l(df -> data.frame(spp=rownames(df),df)) %>%
set_rownames(NULL)
insect_sig <- insect_interact_anova %>%
extract2("uni.p") %>%
t %>%
data.frame %>%
select(-X.Intercept.,
Block_p=Block,
species_p=species) %>%
l(df -> data.frame(spp=rownames(df),df)) %>%
set_rownames(NULL)
list(plotting_data = left_join(insect_sig, insect_statistic),
manyglm_summary = insect_interact_summary,
manyglm_anova = insect_interact_anova,
manyglm = insect_glm_interact)
}
rerun <- FALSE
## calculating model objects
if (rerun) {
## initial insects
insect_manyglm(run_interaction_model = rerun, sampletime = "initial")
insect_manyglm(run_interaction_model = rerun, sampletime = "initial", glm_family = "poisson")
## final insects
insect_manyglm(run_interaction_model = rerun, sampletime = "final")
insect_manyglm(run_interaction_model = rerun, sampletime = "final", glm_family = "poisson")
## initial zoops
insect_manyglm(.taxa = zoop_combined,
run_interaction_model = rerun,
organisms = "zoops",
sampletime = "initial")
insect_manyglm(.taxa = zoop_combined,
run_interaction_model = rerun,
organisms = "zoops",
sampletime = "initial", glm_family = "poisson")
## final zoops
insect_manyglm(.taxa = zoop_combined,
run_interaction_model = rerun,
organisms = "zoops",
sampletime = "final")
insect_manyglm(.taxa = zoop_combined,
run_interaction_model = rerun,
organisms = "zoops",
sampletime = "final", glm_family = "poisson")
} else {
## LOADING model objects
## initial insects
insect_initial_nbin <- insect_manyglm(run_interaction_model = rerun, sampletime = "initial")
insect_initial_pois <- insect_manyglm(run_interaction_model = rerun, sampletime = "initial", glm_family = "poisson")
## final insects
insect_final_nbin <- insect_manyglm(run_interaction_model = rerun, sampletime = "final")
insect_final_pois <- insect_manyglm(run_interaction_model = rerun, sampletime = "final", glm_family = "poisson")
## initial zoops
zoop_initial_nbin <- insect_manyglm(.taxa = zoop_combined,
run_interaction_model = rerun,
organisms = "zoops",
sampletime = "initial")
zoop_initial_pois <- insect_manyglm(.taxa = zoop_combined,
run_interaction_model = rerun,
organisms = "zoops",
sampletime = "initial", glm_family = "poisson")
## final zoops
zoop_final_nbin <- insect_manyglm(.taxa = zoop_combined,
run_interaction_model = rerun,
organisms = "zoops",
sampletime = "final")
zoop_final_posis <- insect_manyglm(.taxa = zoop_combined,
run_interaction_model = rerun,
organisms = "zoops",
sampletime = "final", glm_family = "poisson")
}
## file for analyzing the habitat experiment
## Andrew MacDonald, 2014
# packages ----------------------------------------------------------------
library(dplyr)
library(tidyr)
library(mvabund)
library(magrittr)
library(ggplot2)
library(lubridate)
# read in data ------------------------------------------------------------
blocks <-
read.table("data/blocks.txt",header=TRUE,comment.char="#",
stringsAsFactors=FALSE) %>% tbl_df()
insects <-   read.table("data/insect.communities.table.txt",
header=TRUE,comment.char="#",stringsAsFactors=FALSE) %>% tbl_df()
insectnames <- read.csv(file = "data/insectnames.csv") %>% tbl_df()
zoop <-  read.table("data/zoop.txt",
header=TRUE,comment.char="#",stringsAsFactors=FALSE) %>% tbl_df
bromeliad <-
read.table("data/bromeliad.volumes.txt",comment.char="#",
header=TRUE,stringsAsFactors=FALSE) %>% tbl_df
bact <- list.files("data/bacteria/",
pattern="*.csv",
full.names=TRUE) %>%
lapply(read.table,comment.char="#",
header=TRUE,stringsAsFactors=FALSE,sep=",")
# renaming insects taxa ---------------------------------------------------
## correct variable spellings
insects_renamed <- insects %>%
left_join(insectnames) %>%
select(sampling, bromeliad, Spp = sp_name, abundance) %>%
group_by(sampling, bromeliad, Spp) %>%
summarise(abundance = sum(abundance))
# combining zooplankton ---------------------------------------------------
zoop_combined <- zoop %>%
group_by(sampling, bromeliad, Spp) %>%
summarise(abundance = sum(abundance))
# rearrange bacteria ------------------------------------------------------
bacteria_list <- lapply(bact,function(DF) {
plotdates <- do.call(rbind,strsplit(DF$sample,split=" "))
samp.dates <- paste(apply(plotdates[,-1],1,paste,collapse="-"),"2013",sep="-")
samp.dates <- dmy(samp.dates)
duration <- (max(samp.dates)-samp.dates)<as.duration(259200)
sampling <- c("initial","final")[duration+1]
DF <- DF[,!names(DF)%in%c("sample")]
DF <- plyr::rename(DF,c("Block"="block"))
data.frame(bromeliad=plotdates[,1],sampling,DF,stringsAsFactors=FALSE)%>%
filter(sampling=="final") %>%
select(-block,-sampling)
})
## go through this list, identify the block, and put the block names in a vector
## then set that vector as names for the list.
bacteria_list <- plyr::laply(bacteria_list,function(DF,.bromeliad=bromeliad){
DF %>%
select(Brom=bromeliad) %>%
left_join(.bromeliad) %>%
extract2("Block") %>% unique
}
) %>%
set_names(bacteria_list,.)
# insects in threespp experiment ------------------------------------------
insect_manyglm <- function(.blocks = blocks, .bromeliad = bromeliad,
.taxa = insects_renamed,
run_interaction_model = FALSE,
sampletime = "final", glm_family = "negative.binomial",
organisms = "insects") {
## select blocks
insect_data <- .blocks %>%
filter(experiment == "threespp") %>%
select(Block = block) %>%
## merge to bromeliad
left_join(.bromeliad %>% select(Brom, Block, species)) %>%
# and add the animals
left_join(.taxa %>%
filter(sampling == sampletime) %>%
spread(key = Spp, abundance, fill = 0) %>%
mutate(Brom = bromeliad) %>%
select(-bromeliad)
) %>%
# set up a list object a la mvabund
l(data -> {
list(factors = data %>%
select(Block, species) %>%
as.matrix,
insects = data %>%
select(-Block, -Brom, -species, -sampling) %>%
as.matrix)}
)
## call mvabund on responses
insectresponses <- insect_data %>%
extract2("insects") %>%
mvabund
## run glm
insect_glm_interact <- insect_data %>%
extract2("factors") %>%
data.frame %>%
manyglm(insectresponses ~ Block * species, data = ., family = glm_family)
## name the model output
model_name <- paste0(organisms, "_interaction_summary_", sampletime, "_", glm_family, ".Rdata")
# summary gives overall fit
if (run_interaction_model) {
insect_interact_summary <- insect_glm_interact %>%
summary(resamp="residual")
save(insect_interact_summary, file = model_name)
message(paste("I just created the file",model_name))
} else {
load(model_name)
}
## name the anova output
anova_name <- paste0(organisms, "_interaction_anova_", sampletime, "_", glm_family, ".Rdata")
# anova gives us values for each animal
if (run_interaction_model) {
insect_interact_anova  <- insect_glm_interact %>%
anova(resamp="perm.resid", p.uni="adjusted", show.time="all")
save(insect_interact_anova, file = anova_name)
message(paste("I just created the file", anova_name))
} else {
load(anova_name)
}
insect_statistic <- insect_interact_anova %>%
extract2("uni.test") %>%
t %>%
data.frame %>%
select(-X.Intercept.,
Block_wald=Block,
species_wald=species) %>%
l(df -> data.frame(spp=rownames(df),df)) %>%
set_rownames(NULL)
insect_sig <- insect_interact_anova %>%
extract2("uni.p") %>%
t %>%
data.frame %>%
select(-X.Intercept.,
Block_p=Block,
species_p=species) %>%
l(df -> data.frame(spp=rownames(df),df)) %>%
set_rownames(NULL)
list(plotting_data = left_join(insect_sig, insect_statistic),
manyglm_summary = insect_interact_summary,
manyglm_anova = insect_interact_anova,
manyglm = insect_glm_interact)
}
rerun <- FALSE
## calculating model objects
if (rerun) {
## initial insects
insect_manyglm(run_interaction_model = rerun, sampletime = "initial")
insect_manyglm(run_interaction_model = rerun, sampletime = "initial", glm_family = "poisson")
## final insects
insect_manyglm(run_interaction_model = rerun, sampletime = "final")
insect_manyglm(run_interaction_model = rerun, sampletime = "final", glm_family = "poisson")
## initial zoops
insect_manyglm(.taxa = zoop_combined,
run_interaction_model = rerun,
organisms = "zoops",
sampletime = "initial")
insect_manyglm(.taxa = zoop_combined,
run_interaction_model = rerun,
organisms = "zoops",
sampletime = "initial", glm_family = "poisson")
## final zoops
insect_manyglm(.taxa = zoop_combined,
run_interaction_model = rerun,
organisms = "zoops",
sampletime = "final")
insect_manyglm(.taxa = zoop_combined,
run_interaction_model = rerun,
organisms = "zoops",
sampletime = "final", glm_family = "poisson")
} else {
## LOADING model objects
## initial insects
insect_initial_nbin <- insect_manyglm(run_interaction_model = rerun, sampletime = "initial")
insect_initial_pois <- insect_manyglm(run_interaction_model = rerun, sampletime = "initial", glm_family = "poisson")
## final insects
insect_final_nbin <- insect_manyglm(run_interaction_model = rerun, sampletime = "final")
insect_final_pois <- insect_manyglm(run_interaction_model = rerun, sampletime = "final", glm_family = "poisson")
## initial zoops
zoop_initial_nbin <- insect_manyglm(.taxa = zoop_combined,
run_interaction_model = rerun,
organisms = "zoops",
sampletime = "initial")
zoop_initial_pois <- insect_manyglm(.taxa = zoop_combined,
run_interaction_model = rerun,
organisms = "zoops",
sampletime = "initial", glm_family = "poisson")
## final zoops
zoop_final_nbin <- insect_manyglm(.taxa = zoop_combined,
run_interaction_model = rerun,
organisms = "zoops",
sampletime = "final")
zoop_final_posis <- insect_manyglm(.taxa = zoop_combined,
run_interaction_model = rerun,
organisms = "zoops",
sampletime = "final", glm_family = "poisson")
}
#check assumptions
insect_final_nbin$manyglm %>% plot
insect_final_pois$manyglm %>% plot
zoop_initial_nbin$manyglm %>% plot
zoop_initial_pois$manyglm %>% plot
insect_final_nbin$manyglm_summary
zoop_final_nbin$manyglm_summary
# Bacteria from threespp --------------------------------------------------
if (FALSE) {
bact_results <- plyr::llply(bacteria_list,function(BACTERIA){
## select blocks
bact_data <- blocks %>%
filter(experiment=="threespp") %>%
select(Block=block) %>%
## merge to bromeliad
left_join(bromeliad) %>%
mutate(bromeliad=Brom) %>%
select(-Brom) %>%
# and add the animals
## note that for bacteria, they are joined in the opposite direction!
left_join(BACTERIA,
.                        # this dot essentially makes this a "right join".
) %>%
# set up a list object a la mvabund
l(data -> {
list(factors=data %>% select(Block,species) %>% as.matrix,
bacts=data %>% select(starts_with("X")) %>% as.matrix
)}
)
## call mvabund on responses
bactresponses <- bact_data %>% extract2("bacts") %>% mvabund
## run glm
bact_glm_species <- bact_data %>% extract2("factors") %>% data.frame %>%
manyglm(bactresponses~species,data=.,family="binomial")
bact_total_aov <- anova(bact_glm_species, nBoot=400, test="wald")
## not sure how to interpret
#drop1(bact_glm_species)
# summary gives overall fit
bact_species_summary <- bact_glm_species %>% summary(resamp="pit.trap")
# anova gives us values for each animal
bact_species_anova  <- bact_glm_species %>% anova(resamp="pit.trap",p.uni="adjusted", show.time="all")
bact_statistic <- bact_species_anova$uni.test %>% t %>% data.frame %>%
select(-X.Intercept.,
#Block_wald=Block,
species_wald=species) %>%
l(df -> {data.frame(spp=rownames(df),df)}) %>%
set_rownames(NULL)
bact_sig <- bact_species_anova$uni.p %>% t %>% data.frame %>%
select(-X.Intercept.,
#Block_p=Block,
species_p=species) %>%
l(df -> {data.frame(spp=rownames(df),df)}) %>%
set_rownames(NULL)
bact_species_wald <- left_join(bact_sig,bact_statistic)
list("bact_glm_species"=bact_glm_species,
"bact_total_aov"=bact_total_aov,
"bact_species_summary"=bact_species_summary,
"bact_species_anova"=bact_species_anova,
"bact_species_wald"=bact_species_wald)
})
save(bact_results, file = "bacteria_results_final.Rdata")
message(paste("I just created the file","bacteria_results_final.Rdata"))
} else {
load("bacteria_results_final.Rdata")
}
bact_results %>% lapply(function(blk) extract2(blk,"bact_species_summary"))
## check with plots
par(mfrow=c(2,3))
lapply(bact_results,function(x) plot(x$bact_glm_species))
plyr::ldply(bact_results,extract2,"bact_species_wald") %>%
select(block=.id,
species_p,
species_wald) %>%
ggplot(aes(x=block,y=species_wald))+geom_point()
bact_wald <- plyr::ldply(bact_results,extract2,"bact_species_wald") %>%
select(block=.id,
species_p,
species_wald) %>%
group_by(block) %>%
summarize(sd_wald=sd(species_wald),
species_wald=mean(species_wald)
#             species_p=sum(species_p>0.05),
)
?mvabund-class
?manyglm
insect_final_nbin$manyglm
insect_final_nbin$manyglm_summary
insect_final_nbin$manyglm
insect_final_nbin$manyglm_anova
zoops_final_nbin$manyglm_anova
zoop_final_nbin$manyglm_anova
bact_results %>% lapply(names)
bact_results %>% lapply(function(blk) extract2(blk,"bact_species_anova"))
